# Copyright 2021 John Harwell, All rights reserved.
#
#  This file is part of SIERRA.
#
#  SIERRA is free software: you can redistribute it and/or modify it under the
#  terms of the GNU General Public License as published by the Free Software
#  Foundation, either version 3 of the License, or (at your option) any later
#  version.
#
#  SIERRA is distributed in the hope that it will be useful, but WITHOUT ANY
#  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
#  A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along with
#  SIERRA.  If not, see <http://www.gnu.org/licenses/
#
"""
Classes for generating graphs within a single experiment in a batch.
"""

# Core packages
import typing as tp

# 3rd party packages
import sierra.core.pipeline.stage4 as stage4
from sierra.core import types

# Project packages
from titerra.projects.common.pipeline.stage4.flexibility_plots import FlexibilityPlotsCSVGenerator
from titerra.projects.common.pipeline.stage4.flexibility_plots import FlexibilityPlotsDefinitionsGenerator
import titerra.variables.batch_criteria as bc


class IntraExpGraphGenerator(stage4.intra_exp_graph_generator.IntraExpGraphGenerator):
    """
    Extends :class:`~sierra.core.pipeline.stage4.intra_exp_graph_generator.IntraExpGraphGenerator`
    with additional graphs for the COMMON project.
    """

    def __call__(self, criteria: bc.IConcreteBatchCriteria) -> None:
        """
        In addition to the graphs generated by
        :class:`~sierra.core.pipeline.stage4.intra_exp_graph_generator.IntraExpGraphGenerator`,
        run the following to generate graphs within each experiment in the
        batch:

        - If ``--gen-vc-plots`` was passed, generated variance curve plots.
        """
        if self.cmdopts['gen_vc_plots'] and criteria.is_univar():
            self.logger.info('Flexibility plots from %s',
                             self.cmdopts['exp_output_root'])
            FlexibilityPlotsCSVGenerator(self.main_config,
                                         self.cmdopts)(criteria)

        LN_targets, HM_targets = self.calc_targets()
        self.generate(LN_targets, HM_targets)

    def calc_targets(self) -> tp.Tuple[tp.List[types.YAMLDict],
                                       tp.List[types.YAMLDict]]:
        """
        Add graphs for --gen-vc-plots to set of graphs to generate.
        """
        LN_targets, HM_targets = super().calc_targets()

        if self.cmdopts['gen_vc_plots']:  # optional
            self.logger.debug("Add graphs for flexibility plots")
            extra_graphs = FlexibilityPlotsDefinitionsGenerator()()
            LN_targets.append({'graphs': extra_graphs})

        return LN_targets, HM_targets


__api__ = ['IntraExpGraphGenerator']
